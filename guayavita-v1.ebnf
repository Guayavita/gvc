# ======================================================
# Guayavita v1 â€” Complete EBNF Grammar (extended with strings + comments)
# ======================================================

<program>       ::= <package_decl> { <import_decl> } { <top_level_decl> }

# --- Package + Imports --------------------------------
<package_decl>  ::= "package" <package_path>
<package_path>  ::= <identifier> { "." <identifier> }

<import_decl>   ::= "import" ( <package_path> [ "{" <identifier_list> "}" ] [ "as" <identifier> ]
                              | "{" <import_clause> { "," <import_clause> } "}" )
<import_clause> ::= <package_path> [ "{" <identifier_list> "}" ] [ "as" <identifier> ]
<identifier_list> ::= <identifier> { "," <identifier> }

# --- Top-level declarations ---------------------------
<top_level_decl> ::= <const_decl> | <type_decl> | <fun_decl> | <impl_block> | <var_decl>

<const_decl>    ::= [ "export" ] "def" <identifier> "=" <expression>
<var_decl>      ::= "def" <identifier> [ ":" <type> ] "=" <expression>

<type_decl>     ::= [ "export" ] "type" <identifier> "=" ( <struct_decl> | <enum_decl> )

<fun_decl>      ::= [ "export" ] "fun" <identifier> [ "<" <identifier_list> ">" ]
                     "(" [ <param_list> ] ")" ":" <type> <block>

<impl_block>    ::= "impl" [ "<" <identifier_list> ">" ] <identifier> <impl_body>
<impl_body>     ::= "{" { <fun_decl> } "}"

<param_list>    ::= <param> { "," <param> }
<param>         ::= <identifier> ":" <type>

# --- Types --------------------------------------------
<type>          ::= <basic_type>
                  | <identifier>
                  | <type> "?"
                  | "[" <type> "*" "]"
                  | <primitive_type> "[" <integer> "]"   # fixed-size primitive array
                  | <identifier> "<" <type_list> ">"
                  | "(" <type_list> ")"

<type_list>     ::= <type> { "," <type> }

<primitive_type>::= "bool" | "i8" | "i32" | "i64"
                  | "u8" | "u16" | "u32" | "u64"
                  | "f32" | "f64"
                  | "byte" | "string"

<basic_type>    ::= <primitive_type> | "none"

# --- Statements & Blocks ------------------------------
<block>         ::= "{" { <statement> } "}"

<statement>     ::= <var_decl>
                  | <expression_stmt>
                  | <handle_stmt>
                  | <return_stmt>
                  | <if_stmt>
                  | <while_stmt>
                  | <for_in_stmt>
                  | <for_i_stmt>

<expression_stmt> ::= <expression>

<handle_stmt>   ::= "handle" <expression> "{" { <handle_branch> } "}"
<handle_branch> ::= "Ok" "(" <identifier> ")" "->" <block>
                  | "Err" "(" <identifier> ")" "->" <block>

<return_stmt>   ::= "return" <expression>

<if_stmt>       ::= "if" <expression> <block>
                     { "else if" <expression> <block> }
                     [ "else" <block> ]

<while_stmt>    ::= "while" <expression> <block>

<for_in_stmt>   ::= "for" "def" <identifier> "in" <expression> <block>

<for_i_stmt>    ::= "for" "(" [ <var_decl> ] <expression>? ";" [ <var_decl> ] ")" <block>

# --- Expressions (with precedence) ---------------------
<expression>    ::= <or_expr>

<or_expr>       ::= <and_expr> { "||" <and_expr> }
<and_expr>      ::= <cmp_expr> { "&&" <cmp_expr> }
<cmp_expr>      ::= <add_expr> { ( "==" | "!=" | "<" | "<=" | ">" | ">=" ) <add_expr> }
<add_expr>      ::= <mul_expr> { ( "+" | "-" ) <mul_expr> }
<mul_expr>      ::= <unary_expr> { ( "*" | "/" | "%" ) <unary_expr> }

<unary_expr>    ::= [ "!" | "-" | "+" ] <postfix_expr>

<postfix_expr>  ::= <primary> { <postfix_op> }
<postfix_op>    ::= "." <identifier> | "(" [ <arg_list> ] ")" | "[" <expression> "]"

<primary>       ::= <literal>
                  | <identifier>
                  | <array_literal>
                  | <struct_literal>
                  | "(" <expression_list> ")"

<arg_list>      ::= <expression> { "," <expression> }
<expression_list> ::= <expression> { "," <expression> }

# --- Aggregates ---------------------------------------
<array_literal> ::= "[" [ <expression> { "," <expression> } ] "]"
<struct_literal>::= <identifier> "{" [ <field_init> { "," <field_init> } ] "}"
<field_init>    ::= <identifier> ":" <expression>

# --- Structs & Enums ----------------------------------
<struct_decl>   ::= "struct" "{" { <identifier> ":" <type> } "}"
<enum_decl>     ::= "enum" "{" <enum_variant> { "," <enum_variant> } "}"
<enum_variant>  ::= <identifier> [ "(" <type_list> ")" ]

# --- Literals & tokens --------------------------------
<literal>       ::= <number> | <string> | "true" | "false" | "none"

<number>        ::= <integer> | <float>
<integer>       ::= [ "-" ] <digit> { <digit> }
<float>         ::= [ "-" ] <digit> { <digit> } "." <digit> { <digit> }

<string>        ::= '"' { <string_char> | <escape_sequence> } '"'

<string_char>   ::= ? any Unicode character except " and \ ?
<escape_sequence> ::= "\\" ( "n" | "t" | "r" | "\"" | "\\"
                           | "u" <hex><hex><hex><hex>
                           | "U" <hex><hex><hex><hex><hex><hex><hex><hex>
                           | "x" <hex><hex> )

# --- Comments -----------------------------------------
<comment>       ::= <line_comment> | <block_comment>
<line_comment>  ::= "//" { <any_char_except_newline> } ( "\n" | EOF )
<block_comment> ::= "/*" { <any_char_except_*/> } "*/"

# --- Identifiers --------------------------------------
<identifier>    ::= <letter> { <letter> | <digit> | "_" }
<identifier_list> ::= <identifier> { "," <identifier> }

<letter>        ::= "a" .. "z" | "A" .. "Z"
<digit>         ::= "0" .. "9"
<hex>           ::= <digit> | "a".."f" | "A".."F"
